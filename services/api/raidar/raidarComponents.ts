/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useRaidarContext, RaidarContext } from "./raidarContext";
import type * as Fetcher from "./raidarFetcher";
import { raidarFetch } from "./raidarFetcher";
import type * as Schemas from "./raidarSchemas";

export type GoogleControllerGoogleAuthError = Fetcher.ErrorWrapper<undefined>;

export type GoogleControllerGoogleAuthVariables =
  RaidarContext["fetcherOptions"];

export const fetchGoogleControllerGoogleAuth = (
  variables: GoogleControllerGoogleAuthVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    undefined,
    GoogleControllerGoogleAuthError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/v1/google/sign-in-backend",
    method: "get",
    ...variables,
    signal,
  });

export const useGoogleControllerGoogleAuth = <TData = undefined>(
  variables: GoogleControllerGoogleAuthVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      GoogleControllerGoogleAuthError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<undefined, GoogleControllerGoogleAuthError, TData>(
    queryKeyFn({
      path: "/api/v1/google/sign-in-backend",
      operationId: "googleControllerGoogleAuth",
      variables,
    }),
    ({ signal }) =>
      fetchGoogleControllerGoogleAuth(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GoogleControllerAuthenticateError = Fetcher.ErrorWrapper<undefined>;

export type GoogleControllerAuthenticateVariables = {
  body: Schemas.GoogleLoginDto;
} & RaidarContext["fetcherOptions"];

export const fetchGoogleControllerAuthenticate = (
  variables: GoogleControllerAuthenticateVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    undefined,
    GoogleControllerAuthenticateError,
    Schemas.GoogleLoginDto,
    {},
    {},
    {}
  >({ url: "/api/v1/google/auth", method: "post", ...variables, signal });

export const useGoogleControllerAuthenticate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GoogleControllerAuthenticateError,
      GoogleControllerAuthenticateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    undefined,
    GoogleControllerAuthenticateError,
    GoogleControllerAuthenticateVariables
  >(
    (variables: GoogleControllerAuthenticateVariables) =>
      fetchGoogleControllerAuthenticate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindMeVariables = RaidarContext["fetcherOptions"];

export const fetchUserControllerFindMe = (
  variables: UserControllerFindMeVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.UserDto,
    UserControllerFindMeError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/me", method: "get", ...variables, signal });

export const useUserControllerFindMe = <TData = Schemas.UserDto>(
  variables: UserControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserDto,
      UserControllerFindMeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<Schemas.UserDto, UserControllerFindMeError, TData>(
    queryKeyFn({
      path: "/api/v1/user/me",
      operationId: "userControllerFindMe",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerFindMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerAddWalletError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerAddWalletVariables = {
  body: Schemas.AddWalletDto;
} & RaidarContext["fetcherOptions"];

export const fetchUserControllerAddWallet = (
  variables: UserControllerAddWalletVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.UserDto,
    UserControllerAddWalletError,
    Schemas.AddWalletDto,
    {},
    {},
    {}
  >({ url: "/api/v1/user/add-wallet", method: "post", ...variables, signal });

export const useUserControllerAddWallet = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDto,
      UserControllerAddWalletError,
      UserControllerAddWalletVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.UserDto,
    UserControllerAddWalletError,
    UserControllerAddWalletVariables
  >(
    (variables: UserControllerAddWalletVariables) =>
      fetchUserControllerAddWallet({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SongControllerCreateSongError = Fetcher.ErrorWrapper<undefined>;

export type SongControllerCreateSongVariables = {
  body: Schemas.CreateSongDto;
} & RaidarContext["fetcherOptions"];

export const fetchSongControllerCreateSong = (
  variables: SongControllerCreateSongVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.SongDto,
    SongControllerCreateSongError,
    Schemas.CreateSongDto,
    {},
    {},
    {}
  >({ url: "/api/v1/song", method: "post", ...variables, signal });

export const useSongControllerCreateSong = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SongDto,
      SongControllerCreateSongError,
      SongControllerCreateSongVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.SongDto,
    SongControllerCreateSongError,
    SongControllerCreateSongVariables
  >(
    (variables: SongControllerCreateSongVariables) =>
      fetchSongControllerCreateSong({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SongControllerFindOnePathParams = {
  id: string;
};

export type SongControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type SongControllerFindOneVariables = {
  pathParams: SongControllerFindOnePathParams;
} & RaidarContext["fetcherOptions"];

export const fetchSongControllerFindOne = (
  variables: SongControllerFindOneVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.SongDto,
    SongControllerFindOneError,
    undefined,
    {},
    {},
    SongControllerFindOnePathParams
  >({ url: "/api/v1/song/{id}", method: "get", ...variables, signal });

export const useSongControllerFindOne = <TData = Schemas.SongDto>(
  variables: SongControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SongDto,
      SongControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    Schemas.SongDto,
    SongControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/song/{id}",
      operationId: "songControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchSongControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SongControllerFindAllArtistSongsQueryParams = {
  title?: string;
  take?: number;
  skip?: number;
};

export type SongControllerFindAllArtistSongsError =
  Fetcher.ErrorWrapper<undefined>;

export type SongControllerFindAllArtistSongsResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.SongDto[];
};

export type SongControllerFindAllArtistSongsVariables = {
  queryParams?: SongControllerFindAllArtistSongsQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchSongControllerFindAllArtistSongs = (
  variables: SongControllerFindAllArtistSongsVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    SongControllerFindAllArtistSongsResponse,
    SongControllerFindAllArtistSongsError,
    undefined,
    {},
    SongControllerFindAllArtistSongsQueryParams,
    {}
  >({ url: "/api/v1/song/artist/songs", method: "get", ...variables, signal });

export const useSongControllerFindAllArtistSongs = <
  TData = SongControllerFindAllArtistSongsResponse
>(
  variables: SongControllerFindAllArtistSongsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SongControllerFindAllArtistSongsResponse,
      SongControllerFindAllArtistSongsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    SongControllerFindAllArtistSongsResponse,
    SongControllerFindAllArtistSongsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/song/artist/songs",
      operationId: "songControllerFindAllArtistSongs",
      variables,
    }),
    ({ signal }) =>
      fetchSongControllerFindAllArtistSongs(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SongControllerFindAllUserSongsQueryParams = {
  title?: string;
  take?: number;
  skip?: number;
};

export type SongControllerFindAllUserSongsError =
  Fetcher.ErrorWrapper<undefined>;

export type SongControllerFindAllUserSongsResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.SongDto[];
};

export type SongControllerFindAllUserSongsVariables = {
  queryParams?: SongControllerFindAllUserSongsQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchSongControllerFindAllUserSongs = (
  variables: SongControllerFindAllUserSongsVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    SongControllerFindAllUserSongsResponse,
    SongControllerFindAllUserSongsError,
    undefined,
    {},
    SongControllerFindAllUserSongsQueryParams,
    {}
  >({ url: "/api/v1/song/user/songs", method: "get", ...variables, signal });

export const useSongControllerFindAllUserSongs = <
  TData = SongControllerFindAllUserSongsResponse
>(
  variables: SongControllerFindAllUserSongsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SongControllerFindAllUserSongsResponse,
      SongControllerFindAllUserSongsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    SongControllerFindAllUserSongsResponse,
    SongControllerFindAllUserSongsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/song/user/songs",
      operationId: "songControllerFindAllUserSongs",
      variables,
    }),
    ({ signal }) =>
      fetchSongControllerFindAllUserSongs(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SongControllerBuySongError = Fetcher.ErrorWrapper<undefined>;

export type SongControllerBuySongVariables = {
  body: Schemas.BuySongDto;
} & RaidarContext["fetcherOptions"];

export const fetchSongControllerBuySong = (
  variables: SongControllerBuySongVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.LicenceDto,
    SongControllerBuySongError,
    Schemas.BuySongDto,
    {},
    {},
    {}
  >({ url: "/api/v1/song/buy", method: "post", ...variables, signal });

export const useSongControllerBuySong = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LicenceDto,
      SongControllerBuySongError,
      SongControllerBuySongVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.LicenceDto,
    SongControllerBuySongError,
    SongControllerBuySongVariables
  >(
    (variables: SongControllerBuySongVariables) =>
      fetchSongControllerBuySong({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SongControllerGetNftMediaPathParams = {
  tokenId: string;
};

export type SongControllerGetNftMediaError = Fetcher.ErrorWrapper<undefined>;

export type SongControllerGetNftMediaVariables = {
  pathParams: SongControllerGetNftMediaPathParams;
} & RaidarContext["fetcherOptions"];

export const fetchSongControllerGetNftMedia = (
  variables: SongControllerGetNftMediaVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.StreamableFile,
    SongControllerGetNftMediaError,
    undefined,
    {},
    {},
    SongControllerGetNftMediaPathParams
  >({
    url: "/api/v1/song/{tokenId}/media",
    method: "get",
    ...variables,
    signal,
  });

export const useSongControllerGetNftMedia = <TData = Schemas.StreamableFile>(
  variables: SongControllerGetNftMediaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StreamableFile,
      SongControllerGetNftMediaError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    Schemas.StreamableFile,
    SongControllerGetNftMediaError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/song/{tokenId}/media",
      operationId: "songControllerGetNftMedia",
      variables,
    }),
    ({ signal }) =>
      fetchSongControllerGetNftMedia(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AlbumControllerFindAllArtistAlbumsQueryParams = {
  take?: number;
  skip?: number;
};

export type AlbumControllerFindAllArtistAlbumsError =
  Fetcher.ErrorWrapper<undefined>;

export type AlbumControllerFindAllArtistAlbumsResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.AlbumDto[];
};

export type AlbumControllerFindAllArtistAlbumsVariables = {
  queryParams?: AlbumControllerFindAllArtistAlbumsQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchAlbumControllerFindAllArtistAlbums = (
  variables: AlbumControllerFindAllArtistAlbumsVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    AlbumControllerFindAllArtistAlbumsResponse,
    AlbumControllerFindAllArtistAlbumsError,
    undefined,
    {},
    AlbumControllerFindAllArtistAlbumsQueryParams,
    {}
  >({ url: "/api/v1/album/me", method: "get", ...variables, signal });

export const useAlbumControllerFindAllArtistAlbums = <
  TData = AlbumControllerFindAllArtistAlbumsResponse
>(
  variables: AlbumControllerFindAllArtistAlbumsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AlbumControllerFindAllArtistAlbumsResponse,
      AlbumControllerFindAllArtistAlbumsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    AlbumControllerFindAllArtistAlbumsResponse,
    AlbumControllerFindAllArtistAlbumsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/album/me",
      operationId: "albumControllerFindAllArtistAlbums",
      variables,
    }),
    ({ signal }) =>
      fetchAlbumControllerFindAllArtistAlbums(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AlbumControllerCreateAlbumError = Fetcher.ErrorWrapper<undefined>;

export type AlbumControllerCreateAlbumVariables = {
  body: Schemas.CreateAlbumDto;
} & RaidarContext["fetcherOptions"];

export const fetchAlbumControllerCreateAlbum = (
  variables: AlbumControllerCreateAlbumVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.AlbumDto,
    AlbumControllerCreateAlbumError,
    Schemas.CreateAlbumDto,
    {},
    {},
    {}
  >({ url: "/api/v1/album", method: "post", ...variables, signal });

export const useAlbumControllerCreateAlbum = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AlbumDto,
      AlbumControllerCreateAlbumError,
      AlbumControllerCreateAlbumVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.AlbumDto,
    AlbumControllerCreateAlbumError,
    AlbumControllerCreateAlbumVariables
  >(
    (variables: AlbumControllerCreateAlbumVariables) =>
      fetchAlbumControllerCreateAlbum({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AlbumControllerFindAllQueryParams = {
  take?: number;
  skip?: number;
};

export type AlbumControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type AlbumControllerFindAllResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.AlbumDto[];
};

export type AlbumControllerFindAllVariables = {
  queryParams?: AlbumControllerFindAllQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchAlbumControllerFindAll = (
  variables: AlbumControllerFindAllVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    AlbumControllerFindAllResponse,
    AlbumControllerFindAllError,
    undefined,
    {},
    AlbumControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/album", method: "get", ...variables, signal });

export const useAlbumControllerFindAll = <
  TData = AlbumControllerFindAllResponse
>(
  variables: AlbumControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AlbumControllerFindAllResponse,
      AlbumControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    AlbumControllerFindAllResponse,
    AlbumControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/album",
      operationId: "albumControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchAlbumControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AlbumControllerFindOnePathParams = {
  id: string;
};

export type AlbumControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type AlbumControllerFindOneVariables = {
  pathParams: AlbumControllerFindOnePathParams;
} & RaidarContext["fetcherOptions"];

export const fetchAlbumControllerFindOne = (
  variables: AlbumControllerFindOneVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.AlbumDto,
    AlbumControllerFindOneError,
    undefined,
    {},
    {},
    AlbumControllerFindOnePathParams
  >({ url: "/api/v1/album/{id}", method: "get", ...variables, signal });

export const useAlbumControllerFindOne = <TData = Schemas.AlbumDto>(
  variables: AlbumControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AlbumDto,
      AlbumControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    Schemas.AlbumDto,
    AlbumControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/album/{id}",
      operationId: "albumControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchAlbumControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type FileControllerUploadFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUploadFileRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
};

export type FileControllerUploadFileVariables = {
  body: FileControllerUploadFileRequestBody;
} & RaidarContext["fetcherOptions"];

export const fetchFileControllerUploadFile = (
  variables: FileControllerUploadFileVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.FileDto,
    FileControllerUploadFileError,
    FileControllerUploadFileRequestBody,
    {},
    {},
    {}
  >({ url: "/api/v1/file", method: "post", ...variables, signal });

export const useFileControllerUploadFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileDto,
      FileControllerUploadFileError,
      FileControllerUploadFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.FileDto,
    FileControllerUploadFileError,
    FileControllerUploadFileVariables
  >(
    (variables: FileControllerUploadFileVariables) =>
      fetchFileControllerUploadFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerUpdateFilePathParams = {
  id: string;
};

export type FileControllerUpdateFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUpdateFileRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
};

export type FileControllerUpdateFileVariables = {
  body: FileControllerUpdateFileRequestBody;
  pathParams: FileControllerUpdateFilePathParams;
} & RaidarContext["fetcherOptions"];

export const fetchFileControllerUpdateFile = (
  variables: FileControllerUpdateFileVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.FileDto,
    FileControllerUpdateFileError,
    FileControllerUpdateFileRequestBody,
    {},
    {},
    FileControllerUpdateFilePathParams
  >({ url: "/api/v1/file/{id}", method: "patch", ...variables, signal });

export const useFileControllerUpdateFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileDto,
      FileControllerUpdateFileError,
      FileControllerUpdateFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.FileDto,
    FileControllerUpdateFileError,
    FileControllerUpdateFileVariables
  >(
    (variables: FileControllerUpdateFileVariables) =>
      fetchFileControllerUpdateFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerRemovePathParams = {
  id: string;
};

export type FileControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerRemoveVariables = {
  pathParams: FileControllerRemovePathParams;
} & RaidarContext["fetcherOptions"];

export const fetchFileControllerRemove = (
  variables: FileControllerRemoveVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    string,
    FileControllerRemoveError,
    undefined,
    {},
    {},
    FileControllerRemovePathParams
  >({ url: "/api/v1/file/{id}", method: "delete", ...variables, signal });

export const useFileControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      FileControllerRemoveError,
      FileControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    string,
    FileControllerRemoveError,
    FileControllerRemoveVariables
  >(
    (variables: FileControllerRemoveVariables) =>
      fetchFileControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MarketplaceControllerFindAllQueryParams = {
  title?: string;
  artist?: string;
  minLength?: number;
  maxLength?: number;
  genre?: string;
  mood?: string[];
  tags?: string[];
  minBpm?: number;
  maxBpm?: number;
  instrumental?: boolean;
  musical_key?: string;
  take?: number;
  skip?: number;
};

export type MarketplaceControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type MarketplaceControllerFindAllResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.SongDto[];
};

export type MarketplaceControllerFindAllVariables = {
  queryParams?: MarketplaceControllerFindAllQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchMarketplaceControllerFindAll = (
  variables: MarketplaceControllerFindAllVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    MarketplaceControllerFindAllResponse,
    MarketplaceControllerFindAllError,
    undefined,
    {},
    MarketplaceControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/marketplace/songs", method: "get", ...variables, signal });

export const useMarketplaceControllerFindAll = <
  TData = MarketplaceControllerFindAllResponse
>(
  variables: MarketplaceControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MarketplaceControllerFindAllResponse,
      MarketplaceControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    MarketplaceControllerFindAllResponse,
    MarketplaceControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/marketplace/songs",
      operationId: "marketplaceControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchMarketplaceControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MarketplaceControllerFindOneSongPathParams = {
  id: string;
};

export type MarketplaceControllerFindOneSongError =
  Fetcher.ErrorWrapper<undefined>;

export type MarketplaceControllerFindOneSongVariables = {
  pathParams: MarketplaceControllerFindOneSongPathParams;
} & RaidarContext["fetcherOptions"];

export const fetchMarketplaceControllerFindOneSong = (
  variables: MarketplaceControllerFindOneSongVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.SongDto,
    MarketplaceControllerFindOneSongError,
    undefined,
    {},
    {},
    MarketplaceControllerFindOneSongPathParams
  >({
    url: "/api/v1/marketplace/song/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useMarketplaceControllerFindOneSong = <TData = Schemas.SongDto>(
  variables: MarketplaceControllerFindOneSongVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SongDto,
      MarketplaceControllerFindOneSongError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    Schemas.SongDto,
    MarketplaceControllerFindOneSongError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/marketplace/song/{id}",
      operationId: "marketplaceControllerFindOneSong",
      variables,
    }),
    ({ signal }) =>
      fetchMarketplaceControllerFindOneSong(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ContractControllerCreateContractError =
  Fetcher.ErrorWrapper<undefined>;

export type ContractControllerCreateContractRequestBody = {
  /**
   * ID of the song associated with the contract
   */
  songId: string;
  /**
   * File to upload
   *
   * @format binary
   */
  file: Blob;
};

export type ContractControllerCreateContractVariables = {
  body: ContractControllerCreateContractRequestBody;
} & RaidarContext["fetcherOptions"];

export const fetchContractControllerCreateContract = (
  variables: ContractControllerCreateContractVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.ContractDto,
    ContractControllerCreateContractError,
    ContractControllerCreateContractRequestBody,
    {},
    {},
    {}
  >({ url: "/api/v1/contract", method: "post", ...variables, signal });

export const useContractControllerCreateContract = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ContractDto,
      ContractControllerCreateContractError,
      ContractControllerCreateContractVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useRaidarContext();
  return reactQuery.useMutation<
    Schemas.ContractDto,
    ContractControllerCreateContractError,
    ContractControllerCreateContractVariables
  >(
    (variables: ContractControllerCreateContractVariables) =>
      fetchContractControllerCreateContract({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ContractControllerFindOnePathParams = {
  /**
   * Song ID
   */
  id: string;
};

export type ContractControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ContractControllerFindOneVariables = {
  pathParams: ContractControllerFindOnePathParams;
} & RaidarContext["fetcherOptions"];

export const fetchContractControllerFindOne = (
  variables: ContractControllerFindOneVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    Schemas.ContractDto,
    ContractControllerFindOneError,
    undefined,
    {},
    {},
    ContractControllerFindOnePathParams
  >({ url: "/api/v1/contract/{id}", method: "get", ...variables, signal });

export const useContractControllerFindOne = <TData = Schemas.ContractDto>(
  variables: ContractControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContractDto,
      ContractControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    Schemas.ContractDto,
    ContractControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/contract/{id}",
      operationId: "contractControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchContractControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ContractControllerFindAllBaseArtistContractsQueryParams = {
  limit?: number;
  page?: number;
};

export type ContractControllerFindAllBaseArtistContractsError =
  Fetcher.ErrorWrapper<undefined>;

export type ContractControllerFindAllBaseArtistContractsResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.ContractDto[];
};

export type ContractControllerFindAllBaseArtistContractsVariables = {
  queryParams?: ContractControllerFindAllBaseArtistContractsQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchContractControllerFindAllBaseArtistContracts = (
  variables: ContractControllerFindAllBaseArtistContractsVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    ContractControllerFindAllBaseArtistContractsResponse,
    ContractControllerFindAllBaseArtistContractsError,
    undefined,
    {},
    ContractControllerFindAllBaseArtistContractsQueryParams,
    {}
  >({
    url: "/api/v1/contract/artist/base",
    method: "get",
    ...variables,
    signal,
  });

export const useContractControllerFindAllBaseArtistContracts = <
  TData = ContractControllerFindAllBaseArtistContractsResponse
>(
  variables: ContractControllerFindAllBaseArtistContractsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ContractControllerFindAllBaseArtistContractsResponse,
      ContractControllerFindAllBaseArtistContractsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    ContractControllerFindAllBaseArtistContractsResponse,
    ContractControllerFindAllBaseArtistContractsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/contract/artist/base",
      operationId: "contractControllerFindAllBaseArtistContracts",
      variables,
    }),
    ({ signal }) =>
      fetchContractControllerFindAllBaseArtistContracts(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ContractControllerFindAllSignedArtistContractsQueryParams = {
  limit?: number;
  page?: number;
};

export type ContractControllerFindAllSignedArtistContractsError =
  Fetcher.ErrorWrapper<undefined>;

export type ContractControllerFindAllSignedArtistContractsResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.ContractDto[];
};

export type ContractControllerFindAllSignedArtistContractsVariables = {
  queryParams?: ContractControllerFindAllSignedArtistContractsQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchContractControllerFindAllSignedArtistContracts = (
  variables: ContractControllerFindAllSignedArtistContractsVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    ContractControllerFindAllSignedArtistContractsResponse,
    ContractControllerFindAllSignedArtistContractsError,
    undefined,
    {},
    ContractControllerFindAllSignedArtistContractsQueryParams,
    {}
  >({
    url: "/api/v1/contract/artist/signed",
    method: "get",
    ...variables,
    signal,
  });

export const useContractControllerFindAllSignedArtistContracts = <
  TData = ContractControllerFindAllSignedArtistContractsResponse
>(
  variables: ContractControllerFindAllSignedArtistContractsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ContractControllerFindAllSignedArtistContractsResponse,
      ContractControllerFindAllSignedArtistContractsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    ContractControllerFindAllSignedArtistContractsResponse,
    ContractControllerFindAllSignedArtistContractsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/contract/artist/signed",
      operationId: "contractControllerFindAllSignedArtistContracts",
      variables,
    }),
    ({ signal }) =>
      fetchContractControllerFindAllSignedArtistContracts(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ContractControllerFindAllUserContractsQueryParams = {
  limit?: number;
  page?: number;
};

export type ContractControllerFindAllUserContractsError =
  Fetcher.ErrorWrapper<undefined>;

export type ContractControllerFindAllUserContractsResponse = {
  total: number;
  take: number;
  skip: number;
  count: number;
  results: Schemas.ContractDto[];
};

export type ContractControllerFindAllUserContractsVariables = {
  queryParams?: ContractControllerFindAllUserContractsQueryParams;
} & RaidarContext["fetcherOptions"];

export const fetchContractControllerFindAllUserContracts = (
  variables: ContractControllerFindAllUserContractsVariables,
  signal?: AbortSignal
) =>
  raidarFetch<
    ContractControllerFindAllUserContractsResponse,
    ContractControllerFindAllUserContractsError,
    undefined,
    {},
    ContractControllerFindAllUserContractsQueryParams,
    {}
  >({
    url: "/api/v1/contract/user/signed",
    method: "get",
    ...variables,
    signal,
  });

export const useContractControllerFindAllUserContracts = <
  TData = ContractControllerFindAllUserContractsResponse
>(
  variables: ContractControllerFindAllUserContractsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ContractControllerFindAllUserContractsResponse,
      ContractControllerFindAllUserContractsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRaidarContext(options);
  return reactQuery.useQuery<
    ContractControllerFindAllUserContractsResponse,
    ContractControllerFindAllUserContractsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/contract/user/signed",
      operationId: "contractControllerFindAllUserContracts",
      variables,
    }),
    ({ signal }) =>
      fetchContractControllerFindAllUserContracts(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/google/sign-in-backend";
      operationId: "googleControllerGoogleAuth";
      variables: GoogleControllerGoogleAuthVariables;
    }
  | {
      path: "/api/v1/user/me";
      operationId: "userControllerFindMe";
      variables: UserControllerFindMeVariables;
    }
  | {
      path: "/api/v1/song/{id}";
      operationId: "songControllerFindOne";
      variables: SongControllerFindOneVariables;
    }
  | {
      path: "/api/v1/song/artist/songs";
      operationId: "songControllerFindAllArtistSongs";
      variables: SongControllerFindAllArtistSongsVariables;
    }
  | {
      path: "/api/v1/song/user/songs";
      operationId: "songControllerFindAllUserSongs";
      variables: SongControllerFindAllUserSongsVariables;
    }
  | {
      path: "/api/v1/song/{tokenId}/media";
      operationId: "songControllerGetNftMedia";
      variables: SongControllerGetNftMediaVariables;
    }
  | {
      path: "/api/v1/album/me";
      operationId: "albumControllerFindAllArtistAlbums";
      variables: AlbumControllerFindAllArtistAlbumsVariables;
    }
  | {
      path: "/api/v1/album";
      operationId: "albumControllerFindAll";
      variables: AlbumControllerFindAllVariables;
    }
  | {
      path: "/api/v1/album/{id}";
      operationId: "albumControllerFindOne";
      variables: AlbumControllerFindOneVariables;
    }
  | {
      path: "/api/v1/marketplace/songs";
      operationId: "marketplaceControllerFindAll";
      variables: MarketplaceControllerFindAllVariables;
    }
  | {
      path: "/api/v1/marketplace/song/{id}";
      operationId: "marketplaceControllerFindOneSong";
      variables: MarketplaceControllerFindOneSongVariables;
    }
  | {
      path: "/api/v1/contract/{id}";
      operationId: "contractControllerFindOne";
      variables: ContractControllerFindOneVariables;
    }
  | {
      path: "/api/v1/contract/artist/base";
      operationId: "contractControllerFindAllBaseArtistContracts";
      variables: ContractControllerFindAllBaseArtistContractsVariables;
    }
  | {
      path: "/api/v1/contract/artist/signed";
      operationId: "contractControllerFindAllSignedArtistContracts";
      variables: ContractControllerFindAllSignedArtistContractsVariables;
    }
  | {
      path: "/api/v1/contract/user/signed";
      operationId: "contractControllerFindAllUserContracts";
      variables: ContractControllerFindAllUserContractsVariables;
    };
